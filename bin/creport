#!/bin/ksh

# Get a post-processed report from multiple hosts using a individual
# script distributed via clush.

USAGE="$0 <options> <single-host-script> [<clush options>]

Options:
	-h          Help message

	-S <dir>    Use this script path
	-I <info>   Extra display information
	-T <title>  Set title for report
	-c          Run the specified command instead of a scriptlet
	-n          Noop mode

	-M          Send report via email to \$MAILTO, or \$USER.

	Error display
	-E          Don't report any script error messages
	-e          Do report any script error messages (default)

	Reporting options
	-C	    Group the results by host
	-R	    Group the hosts by report output

	Clush options:
	-L         disable header block and order output by nodes
	-b         display gathered results
	-B         display gathered results
	-N         disable labeling of command line
	-q         quiet clush output

	-P <num>   same as --pick=<num>

	Clush targets:
	-a         Run on all nodes
	-w <nodes> Specified clush nodelist
	-x <nodes> Exclude these nodes

Default information can be added via 
##Info .....

Default clush options can be specifiedin the script via
##clushopt <options>

Default clush targets can be specifiedin the script via
##clush [-w <...>] [-x <...>] [-a]

Post processing containing in script:
##post <shell command>

Show errors via
## errors show
## errors hide

Post processing for results can be found in a script named
	<single-host-script>-post
Also can be set via
##POST <shell command>

Invocation: $0 $@
"

# Defaults
collect=
SPATH=$( dirname $(readlink -f $(which $0) ) )/../lib/creport
OUT() { cat; }
TITLE=
CLUSHOPT=
CLUSHTARGETS=
SHELLCMD=
iscmd=
GROUPBY=
PAYLOAD=/dev/null
DATAFILE=/dev/null
POSTCMD=
POST=
showerrors=
noop=
INFO=
DEFAULTCLUSHTARGETS="-a"
ARGS=

# Load system defaults
RC=/etc/creport
[ -f "$RC" ] && . "$RC"

# NB The 'sort' command sorts differently depending on the LANG and LC_ALL env vars
#    This will cause some grouped results to oddly split apart!
unset LANG LC_ALL LC_COLLATE

# Set email recipient
: ${MAILTO:=$LOGNAME}
: ${MAILTO:=$USER}

# Post-process functions.
groupbyresult () { sed -e 's/^\([^:]*\): \(.*\)/\2:::: \1/' | sort | prefix2header -n -u -s '::::\s+' | fmt ; }
groupbyhost   () { prefixsort | prefix2header; }
Paragraph () { sed -e "1i$1" | sed -e "1{p;s/./-/g};2,\$s/^/  /" -e '$a\\'; }

export INFO
info () { ifne ksh -c 'echo -n "$INFO" | fmt | sed -e "\$a\\\\"; cat;'; }

# If not in a terminal, deliver report via email
#[ ! -t 0 ] && OUT() { subjectise -t "$MAILTO" | ifne sendmail -t; }

# GNU --help flag shortcut
[ "x$1" = "x--help" ] && echo "$USAGE" && exit 0 

# Parse command line.
while getopts ":hnI:T:cS:eERCaw:x:LBbqNMP:Z" optchar
do
	#echo "option $optchar"
	case "$optchar" in
                h)  echo "$USAGE" && exit 0 ;;
		Z)  find "$SPATH" -type f -executable -printf '%f\n' | column && exit 0 ;;

		n)  noop=echo ;;

		I)  INFO="$INFO$OPTARG
" ;;
		T)  TITLE="$OPTARG" ;;
		c)  iscmd=1 ;;
		S)  SPATH="$OPTARG" ;;

		e)  showerrors=show ;;
		E)  showerrors=none ;;

		R)  GROUPBY=results ;;
		C)  GROUPBY=host ;;

		M)  OUT() { subjectise -t "$MAILTO" | ifne sendmail -t; } ;;

		[LbBqB])  CLUSHOPT="$CLUSHOPT -$optchar" ;;
		P)  CLUSHOPT="$CLUSHOPT --pick=$OPTARG" ;;

		a)     CLUSHTARGETS="$CLUSHTARGETS -$optchar" ;;
		[wx])  CLUSHTARGETS="$CLUSHTARGETS -$optchar $(echo $OPTARG | sed -e 's/ /,/g')" ;;

		\?) echo "$0: unknown option '-$OPTARG'"; return ;;
		\:) echo "$0: missing value for '-$OPTARG'"; return ;;
		*)  echo "$0: odd option '-$optchar'"; return ;;
	esac
done
# Lose all the options.
shift $(($OPTIND - 1))

# Add scriptlet path to search PATH
[ -z "$SPATH" ]   && echo "Script path empty!"          && exit 1
[ ! -d "$SPATH" ] && echo "Script path does not exist!" && exit 1
PATH=$SPATH:$PATH

# Usage with scriptlet list
[ -z "$SHELLCMD" -a $# = 0 ] && echo "$USAGE" && find "$SPATH" -type f -executable -printf '%f\n' | column && exit 1

# command or playload script?
if [ ! -z "$iscmd" ]
then
	# It's just a straight command
	SHELLCMD="$@"
else
	# It's a scriptlet

	# Find payload
	! PAYLOAD=$(which $1 2>/dev/null) && echo "No such report as '$1'" && exit 1
	#echo PATH=$PATH; echo PAYLOAD=$PAYLOAD

	# Locate any scriptlet site data
	DATAFILE="/etc/creport.d/$(basename $PAYLOAD)"

	# What is the "shell" for the script?
	SHELLCMD=$(sed -e '1 { s/^#! *//;q}' "$PAYLOAD")
	: ${SHELLCMD:=/bin/ksh}

	# Find any post processing script.
	POST="${PAYLOAD}-post"
	[ ! -x "$POST" ] && POST=

	# Default options from payload.
	[ -z "$TITLE" ]        && TITLE=$(sed -n -e 's/^##[[:space:]]*title[[:space:]]//ip' "$PAYLOAD")
	[ -z "$INFO" ]         && INFO=$(sed -n -e 's/^##[[:space:]]*info[[:space:]]//ip' "$PAYLOAD")
	[ -z "$CLUSHTARGETS" ] && CLUSHTARGETS=$(sed -n -e 's/^##[[:space:]]*clush[[:space:]]//ip' "$PAYLOAD")
	[ -z "$CLUSHOPT" ]     && CLUSHOPT=$(sed -n -e 's/^##[[:space:]]*clushopt[[:space:]]//ip' "$PAYLOAD")
	[ -z "$GROUPBY" ]      && GROUPBY=$(sed -n -e 's/^##[[:space:]]*groupby[[:space:]]//ip' "$PAYLOAD")
	[ -z "$showerrors" ]   && showerrors=$(sed -n -e 's/^##[[:space:]]*errors[[:space:]][[:space:]]*//ip' "$PAYLOAD" | tr A-Z a-z )
	[ -z "$POSTCMD" ]      && POSTCMD=$(sed -n -e 's/^##[[:space:]]*post[[:space:]]//p' "$PAYLOAD" | paste -d\| -s)
	[ -z "$POST" ]         && POST=$(sed -n -e 's/^##[[:space:]]*POST[[:space:]]//p' "$PAYLOAD")

	# Set TITLE if not already set.
	: ${TITLE:=$(basename $1 | sed -e 's/-\(.\)/ \u\1/g' -e 's/^./\u&/'  ) }

	shift;

	# Deal with script arguments.
	ARGS=
	case "$SHELLCMD" in
		*sh*)	ARGS="set -- $@" ;;
		*perl*)	
			for a
			do
				ARGS="$ARGS '$a'," 
			done
			ARGS="\$0='${PAYLOAD}'; @ARGV=($ARGS);"
		;;

		*python*)
			for a
			do
				ARGS="$ARGS, '$a'" 
			done
			ARGS="import sys; sys.argv = ('${PAYLOAD}' $ARGS);"
		;;
		*) echo "Don't know how to deliver arguments for $SHELLCMD" >&2 ;;
	esac
fi

# Reset info if it has no real content
echo "$INFO" | grep '[^[:space:]]' > /dev/null || INFO=

# Set some defaults
: ${showerrors:=show}
: ${POSTCMD:=cat}
: ${POST:=cat}
: ${TITLE:=Report}
: ${CLUSHTARGETS:="$DEFAULTCLUSHTARGETS"}

# Create functions
eval "postcmd () { $POSTCMD; }"
eval "POST () { $POST; }"

# If the TITLE is just a dash, don't add a TITLE nor indent.
# This allows one-paragraph per host, non-indented reports
[ "x-" = "x$TITLE" ] && Paragraph () { cat; }

# How to group the results in the final output.
if [ -z "$collect" ]
then
	case "$GROUPBY" in
		host*)   collect=groupbyhost;;
		result*) collect=groupbyresult;;
		*)       collect=cat ;;
	esac
fi

# Error reporting.
ERRORS=$(mktemp)
trap '/bin/rm -f "$ERRORS"' 0

# Run the report everywhere
{
	# Report and format report
	echo "$ARGS" |
	cat - "$DATAFILE" "$PAYLOAD" 2>/dev/null | 
		$noop clush $CLUSHOPT $CLUSHTARGETS -- $SHELLCMD 2>"$ERRORS" |
		postcmd | 
		$collect

	# Errors
	if [ "x$showerrors" = "xshow" ]
	then
		# Collect different types of clush and ssh errors.
		{
		cat <<#'END'
			code_255	clush: \\(.*\\): exited with exit code 255
			No_Route	.* ssh: connect to host \\([^[:space:]]*\\) port [0-9]*: No route to host
			Unresolved	.*Could not resolve hostname \\([^[:space:]]*\\): Name or service not known
			Denied		\\([^[:space:]][^[:space:]]*\\): Permission denied .*
			Timeout		.* ssh: connect to host \\(.*\\) port [0-9]*: Connection timed out
		END
		} | while read TYPE MATCH
		do
			# sed magic - print matches to stderr, the rest rewrites the original file
			sed -i -n -e "s/$MATCH/\1/; terr ; p; bend  
				:err         
				w /dev/stderr
				:end" "$ERRORS" 2>&1 |
		       	uniq | ifne paste -s '-d ' | fmt |
			sed -e "1i\\\n$TYPE" -e 's/^/  /' 
		done
	
		# Show the left-over errors
		cat "$ERRORS" | 
			sed -e "1i\\\nErrors"  -e 's/^/  /' 
	fi

} |
# Post-process
	info |
	Paragraph "$TITLE" |
	POST |
	OUT

