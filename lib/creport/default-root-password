#! /usr/bin/perl

# Check that the password has been reset from the PXE default, or
# otherwise unwanted passwords. Likewise report on naught crypt methods,
# such as MD5.

# Options are:
# 	oneach -p -s $check 
# 	oneach -p egrep '^root' /etc/shadow | $check -
#
# See http://alotofbytes.blogspot.com/2011/01/how-to-generate-encrypted-shadow.html
#
# ARF 11 May 2012
# ARF 11 December 2012
#
## errors hide

use 5;
use strict;
use warnings;

delete $ENV{LANG};

use Sys::Hostname;

# Old or default passwords.
# set in data file for this scriptlet
####my @default = ( 'Penguin',);

# From the crypt manual....
# Uncomment to report naughty methods.
my %naughty_method = (
	#1	=> 'MD5',
	#'2a'	=> 'Blowfish',
	#5	=> 'SHA256',
	#6	=> 'SHA512',
);

# Default place to look.
@ARGV = qw(/etc/shadow) unless @ARGV;

LINE: while (<>)
{
	# Look for root entries....
	if (/^((\S+)\s+)?root:([^:]*):/)
	{
		my $host = defined $1 ? $1 : hostname;

		next if ($3 eq '!');

		if (!defined($3) or $3 eq '')
		{
			print "$host ($ARGV) root passwd needs to be set!\n";
			next;
		}

		my $epw = $3;
		#warn "epw=$epw\n";

		unless (
			$epw =~ /^(\$([^\$]+)\$[^\$]+\$)([^:]+)$/
			or
			$epw =~ /^([a-zA-Z0-9]{2})([a-zA-Z0-9]{11})$/
		)
		{
			print "$host ($ARGV) root odd format passwd!\n";
			next;
		}

		#print crypt($default, $3), "\n";
		#print "host=$host\n";
		#print "epw=$epw\n";
		#print "1=$1 2=$2 3=$3\n";

		my $asalt = $1;
		my $id	= $2;

		if (exists $naughty_method{$id})
		{
			print "$host ($ARGV) root passwd uses $naughty_method{$id}!\n";
			next;
		}

		for my $pw (@default)
		{
			if ($epw eq crypt($pw, $asalt))
			{
				print "$host ($ARGV) root passwd needs to be reset!\n";
				next LINE;
			}
		}

		#print "$host ($ARGV) root passwd OK\n";
	}

}

