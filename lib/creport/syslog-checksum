#!/usr/bin/perl

# Create SHA1 checksum of all syslog for yesterhour or yesterday,

### Check the checksums of syslog events; excludimg where 2 systems match.
### If any lines are produced by creport then either a host is not logging
### or a log has been tampered with.

# Requires these packages.
# apt -y install libdigest-sha-perl
# yum -y install perl-Digest-SHA

# creport
# sort the lines by host logs (field 2), count by uniq fields (2+) and remove dups.
# If two syslog hosts report the same logs then no output
##post sort -k2 | uniq -c -f2 | sed -e '/^ *2/d' | column -t

# NB: if you have systems in different timezones you need to set the offset
# large enough that you can capture logs for the matching date. For example,
# for GB and US/EST hosts use an offset of at least 6.

use 5;
use strict;
use warnings;

use POSIX;
use Data::Dumper;
use Digest::SHA  qw(sha1 sha1_hex sha1_base64);
use Getopt::Std;
use Sys::Hostname;

# Initialise
my $H = hostname;
my $fmt = '%b %e %H:\d\d:\d\d';
sub verbose { 1; }

# Parse command line
my $usage = "Usage: $0 [-v] [-o <offset>] [-d] <hosts>*\n";
my %flag = (
		o => undef,	# offset (hours)
		v => 0,	# verbosity
		d => 0,	# whole day rather than an hour
		M => undef,	# set the match directly
		D => 0,	# debug
);
getopts('vo:dM:D', \%flag) || die $usage;

if ($flag{v}) { eval 'no warnings; sub verbose { print STDERR @_; }'; }
if ($flag{d}) { $fmt = '%b %e \d\d:\d\d:\d\d'; $flag{o} //= 24; }
$flag{o} //= 6;

# Match
my $match = POSIX::strftime($fmt, localtime(time-$flag{o}*3600));

if (defined $flag{M}) { $match = $flag{M}; }

# hosts to keep
my %keep = map { $_ => 1 } split(/,/, join(',', @ARGV));

# Files
@ARGV=  
	sort { (stat($a))[9] <=> (stat($b))[9]; }
	map { glob($_ . '*'); }
      	grep { -f } 
	qw(
		/var/log/secure
		/var/log/messages

		/var/log/auth.log
		/var/log/syslog
	);

my $scmd = join(' ', "grep -hP '$match'", @ARGV) . "\n";
verbose $scmd;

# Extract the logs for each host
my %count;
my %lines;
while (<>)
{
	# Extract logs of interest, ie that match the "match".
	next unless /^($match)\s(\S+)\s/;

	# Now match the host the date.....
	next unless (/^\S+\s+\d+\s+\d\d:\d\d:\d\d\s+(\S+)/);
	my $h = $1;

	# only keep interesting hosts
	next if (%keep and !exists($keep{$h}));

	# Fix up lines
	#s/( org.gnome.Shell.desktop\[\d+\]) /$1: /;
	# Solution: exclude from logs.

	# Some messages have too long a "tag" for rsyslog; truncate
	if (/^(\S+\s+\d+\s+\d\d:\d\d:\d\d\s+\S+\s+)([^\s]+)(\s+.*)/)
	{
		my $start = $1;
		my $tag = $2;

		if (length($tag) > 30)
		{
			$tag = substr( $tag, 0, 30 );
			#warn "old $_";
			$_ = $1 . $tag . $3;
			#die "new $_"
		}
	}

	# Remember the lines
	$count{$h} ++;
	push @{$lines{$h}}, $_;

}

# Report all the checksums.
for my $h (sort keys %count)
{
	# Create check sum... sort log lines so that the order is stable.
	my $sum =  Digest::SHA->new;
	$sum -> add(sort @{$lines{$h}});

	# Debugging - save logs
	if ($flag{D})
	{
		open (LOG, '>>', "/tmp/syslog-$H-$h.$$.log");
		if ($flag{v}) { print LOG $scmd; }
		print LOG @{$lines{$h}};
		close LOG;
	}

	# Results
	print join("\t", $h, $count{$h}, $sum->b64digest), "\n";
}

