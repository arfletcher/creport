#!/bin/ksh

### Report agent deployment.
### List the information on required agents: running, config, etc..
### BigFix, Tenable, Carbon Black, FireEye HX, ClamAV, Splunk.
###
### * BigFix, Tenable, ClamAV on everywhere
### * SplunkForwarder on on all external systems
### * EndGame, Forescout, CarbonBlack should be off everywhere
###

#    usage: agents [<check>]*
#    usage: creport agents [<check>]*

# creport options.
##clushopt -Lq -u 160
##groupby results

# ##### Payload ###############

# List of systems to exclude.
[[ $(lsb_release -sir) = CentOS\ 5.* ]] && echo Ignored && exit 0

whence ifne >/dev/null || echo Command ifne missing

reportagent () {
	name="$1"; shift
	ps h -C "$name" >/dev/null && echo "$@" is running || echo "$@" is not running
}


###############################################
# ClamAV
R_clamav () {
[ -x /usr/bin/clamscan ] && echo ClamAV is installed || echo ClamAV is not installed
clamscan -V | sed -e 's!/... .*!!' -e 's/ / version /'

# check signatures are fresh
clamscan --quiet -i /etc/shells 2>&1 | grep older | sed -e 's/^/ClamAV /'
}

###############################################
# Carbon Black
R_carbonblack () {
lsb_release -si | egrep -i "CentOS|Redhat|Scientific" >/dev/null && reportagent cbdaemon CarbonBlack
[ -x /usr/sbin/cbdaemon ] && /usr/sbin/cbdaemon -v | sed -n -e 's/ (.*//' -e 's/CbDaemon/CarbonBlack/p'
}

###############################################
# Tenable 

R_tenable () {
reportagent nessusd Tenable Agent
if [ -d /opt/nessus_agent ]
then
	/opt/nessus_agent/sbin/nessuscli agent status 2>&1 | egrep -i Link | egrep -v failed | sed -e 's/to:/to/' -e 's/^/Tenable: /'
	/opt/nessus_agent/sbin/nessusd -v | sed -n -e 's/ .build.*//p' | sed -e 's/^/Tenable: /'

	# Check Tenable daily scan
	LOG=/opt/nessus_agent/var/nessus/logs/backend.log
	if [ -f $LOG ]
	then
		sed -n -e "s/.*Started remote scan '//p" "$LOG" |
			sed -e 's/. as local scanner.*//' |
			tail -1 |
			sed -e 's/  */ /g' -e 's/^/Tenable Task /' |
			egrep . || echo Tenable Daily Tenable Scan missing

		# See if the Tenable Agent is thrashing during the last hour.
		egrep $(date +%d/%b/%Y:%H -d "last hour" ) "$LOG" | egrep logdaily | sed 1,5d | ifne echo Tenable thrashing 
	else
		echo Tenable not logging
	fi

else
	echo Tenable not installed
fi
}

###############################################
# BigFix
R_bigfix () {
reportagent BESClient BigFix

if [ -d /var/opt/BESClient ]
then
# Check BigFix logs over the last day and a bit.
LOGS=$(
for w in yesterday now
do
	LOG=/var/opt/BESClient/__BESData/__Global/Logs/$(date +%Y%m%d.log -d "$w")
	[ -f $LOG ] && echo $LOG
done
)

if [ -n "$LOGS" ]
then
	sed -n -e 's/ built for .*//' -e 's/^[[:space:]]*Client version /BigFix version /p' $LOGS | tail -1

	#egrep -B 1 'Encrypted Report posted successfully' $LOG  | tail -2 | sed -e '1{s/^/BigFix Last Check In /; q}'
	egrep -h 'Report posted successfully' $LOGS | tail -1 | sed -e 's/^[[:space:]]*/BigFix /'

	# List the BigFix groups this client is in.
	sed -n 's/^.*Successful Synchronization with site .//p' $LOGS | sed -e "s/' .*//" | sort | uniq | paste -s '-d;' | sed -e 's/;/; /g' | sed -e 's/^$/Missing Custom Group/' -e 's/^/BigFix Sites: /'
else
	:
	echo "BigFix no logs"
fi

# Check that nothing is wrong.
du -sh '/opt/tivoli' 2>/dev/null | egrep '[TG]' > /dev/null && echo "BigFix Large Tivoli cache"

fi
}


###############################################
# Splunk
R_splunk () {
reportagent splunkd Splunk Forwarder

DIR=/opt/splunkforwarder/var/log/splunk
if [ -d "$DIR" ]
then
	# Version
	sed -n -e 's/VERSION=/SplunkForwarder version /p' /opt/splunkforwarder/etc/splunk.version

	# Is Splunk talking to the servers?
	egrep 'group=per_source_thruput, series="/opt/splunkforwarder/var/log/splunk/metrics.log"' $DIR/metrics.log > /dev/null && 
		echo Splunk reporting || echo Splunk not reporting
	
	# What is Splunk reporting on?
	sed -n -e 's/", kbps=.*//' -e 's/.*Metrics - group=per_source_thruput, series="//p' $DIR/*.log |
		sed -e 's!\(/var/log/httpd/\)[^/]*\(.log\)$!\1*\2!' |    # special handling of web logs
   		sort | uniq |
		egrep -v '^/opt/splunkforwarder/' | paste -d, -s | sed -e 's/,/, /g' |
		sed -e 's/^$/no system logs./' |
		sed -e 's/^/Splunk watching /'


	# Permssions issues.
	egrep $(date "+^%m-%d-%Y ") $DIR/splunkd.log | sed -n -e 's/.*error getting attributes of path "//p' | sed -e 's/".*//' | sort | uniq | ifne paste -d, -s | sed -e 's/^/Splunk Permission issues: /'
fi
}

###############################################
# FireEye HX
R_fireeye () {
	reportagent xagt FireEyeHX
	[ ! -x /opt/fireeye/bin/xagt ] && echo FireEyeHX not installed && return

	/opt/fireeye/bin/xagt -v | sed -e 's/^/FireEyeHX version /'

	#/opt/fireeye/bin/xagt -G -T 3600 |
        	#sed -n -e 's/.  Attempt: [0-9]*$//' -e 's/.*tcp.cc:0827: m=TCPConnect //p' |
		#sort | uniq | paste -s -d, |
		#sed -e 's/^/FireEyeHX connections /'

	NOW=$(mktemp)
	/opt/fireeye/bin/xagt -x "$NOW"  2>/dev/null >/dev/null
	{
	if type jq >/dev/null 2>/dev/null
	then
		jq -r .serverlist.servers[].server  "$NOW" 
	else
		sed -n -e 's/"//g' -e 's/.*server:[[:space:]]*//p' "$NOW"
	fi
	} | sort | paste -s -d, | sed -e 's/^/FireEyeHX connections /'
	rm -f "$NOW"

	# Any connection failures
	/opt/fireeye/bin/xagt -T 86400 -G  2>/dev/null | grep -q 'm=Error on connect' && echo FireEyeHX connection errors

	# NB: tail log: /opt/fireeye/bin/xagt -T 60 -F -G
	# NB: see jobs in last day:  /opt/fireeye/bin/xagt -T 86400 -G | grep 'm=#JOB#'
	/opt/fireeye/bin/xagt -T 86400 -G  2>/dev/null | grep -q 'm=#JOB#' && echo FireEyeHX jobs run || echo FireEyeHX jobs not run
}

###############################################
# Forescout
R_forescout () {
reportagent ForeScoutSecureConnector.bin Forescout
LOG=/usr/lib/forescout/bin/log/fs_sc.log
if [ -f "$LOG" ]
then
	LOGS=$(ls -1rt /var/log/forescout/fs_sc.log*)

	sed -n -e 's/",$//' -e 's/.*sc_version": "/Forescout version /p' ${LOGS} | tail -1
	sed -n 's/.*got compliance message :/Forescout status/p' ${LOGS} | tail -1
fi
}

###############################################
# Endgame
R_endgame () {
	reportagent esensor Endgame
	pgrep esensor | xargs -r lsof -p | sed -n 's/.*TCP .*->/Endgame connected to /p' | sed -n -e 's/ (ESTABLISHED)//p' 
}

############################################################################################
# Command line
list=
USAGE="Usage: $0 [<options>] [<agents>]*
       creport $0 [<options>] [<agents>]*

Options:
	-h	This help message

Agents:
$( functions | sed -n -e 's/R_/   /p' | sed -e 's/().*//' | sort )

"
while getopts ":h" optchar
do
        case $optchar in
                h)  echo "$USAGE" ; exit 0 ;;

                \:) echo "Missing option value for -$OPTARG" >&2 ; exit 1 ;;
                \?) echo "Invalid option: -$OPTARG" >&2 ; exit 1 ;;
        esac
done
shift $((OPTIND-1))
############################################################################################

# Run sub-agent functions
# The default is all checks.
[ "$#" = 0 ] && set -- $( functions | sed -n -e 's/R_//p' | sed -e 's/().*//' | sort )
for func
do
	type R_$func 2>&1 | grep -q 'is a function' && R_$func || echo "$func: no such agent"
done

exit 0

